/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.roboracers.gaeldrive;

import static org.junit.jupiter.api.Assertions.assertTrue;

import com.roboracers.gaeldrive.filters.ParticleFilter2d;
import com.roboracers.gaeldrive.sensors.PositonalSensorModel;
import com.roboracers.gaeldrive.sensors.SensorModel;
import com.roboracers.gaeldrive.utils.VectorUtils;

import org.apache.commons.math3.linear.ArrayRealVector;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

class PositionalSensorTest {
    @Test void TranslationAndPositionTest() throws Exception {

        ParticleFilter2d particleFilter2d = new ParticleFilter2d();

        PositonalSensorModel positonalSensorModel = new PositonalSensorModel() {

            @Override
            public double getWeightModifier() {
                return 1;
            }

            @Override
            public void update() {
                position = VectorUtils.create3DVector(36,36,0);
            }
        };

        PositonalSensorModel positonalSensorModel1 = new PositonalSensorModel() {

            @Override
            public double getWeightModifier() {
                return 1;
            }

            @Override
            public void update() {
                position = VectorUtils.create3DVector(30,0,0);
            }
        };

        List<SensorModel> sensors = new ArrayList<>();

        sensors.add(positonalSensorModel);

        particleFilter2d.initializeParticles(
                500,
                VectorUtils.create3DVector(0,0,0)
        );

        for (int i = 0; i < 300; i++) {
            particleFilter2d.translateParticles(
                    VectorUtils.create3DVector(0.1, 0,0)
            );
            for (SensorModel sensor: sensors
                 ) {
                sensor.update();
            }
            particleFilter2d.weighParticles(sensors);
            particleFilter2d.resampleParticles(new double[] {0.1,0.1,0.001});
        }

        particleFilter2d.weighParticles(sensors);

        System.out.print(particleFilter2d.getBestParticle());

    }
}
